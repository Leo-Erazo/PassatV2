'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4959
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsFacturas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsFacturas
    Inherits Global.System.Data.DataSet
    
    Private tableFacturacion_Encabezado As Facturacion_EncabezadoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Facturacion_Encabezado")) Is Nothing) Then
                MyBase.Tables.Add(New Facturacion_EncabezadoDataTable(ds.Tables("Facturacion_Encabezado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Facturacion_Encabezado() As Facturacion_EncabezadoDataTable
        Get
            Return Me.tableFacturacion_Encabezado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsFacturas = CType(MyBase.Clone,dsFacturas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Facturacion_Encabezado")) Is Nothing) Then
                MyBase.Tables.Add(New Facturacion_EncabezadoDataTable(ds.Tables("Facturacion_Encabezado")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFacturacion_Encabezado = CType(MyBase.Tables("Facturacion_Encabezado"),Facturacion_EncabezadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFacturacion_Encabezado) Is Nothing) Then
                Me.tableFacturacion_Encabezado.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsFacturas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsFacturas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFacturacion_Encabezado = New Facturacion_EncabezadoDataTable
        MyBase.Tables.Add(Me.tableFacturacion_Encabezado)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFacturacion_Encabezado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsFacturas = New dsFacturas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Facturacion_EncabezadoRowChangeEventHandler(ByVal sender As Object, ByVal e As Facturacion_EncabezadoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Facturacion_EncabezadoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPeriodo_ID As Global.System.Data.DataColumn
        
        Private columnFactura_num As Global.System.Data.DataColumn
        
        Private columnSocio_ID As Global.System.Data.DataColumn
        
        Private columnPropietario As Global.System.Data.DataColumn
        
        Private columnDireccion_fisica As Global.System.Data.DataColumn
        
        Private columnMedidor_num As Global.System.Data.DataColumn
        
        Private columnServicio_ID As Global.System.Data.DataColumn
        
        Private columnServicio_desc As Global.System.Data.DataColumn
        
        Private columnLectura_anterior As Global.System.Data.DataColumn
        
        Private columnLectura_actual As Global.System.Data.DataColumn
        
        Private columnConsumo As Global.System.Data.DataColumn
        
        Private columnUnidad_exceso As Global.System.Data.DataColumn
        
        Private columnCobro_exceso As Global.System.Data.DataColumn
        
        Private columnFacturado As Global.System.Data.DataColumn
        
        Private columnSaldos As Global.System.Data.DataColumn
        
        Private columnFecha_emision As Global.System.Data.DataColumn
        
        Private columnFecha_vence As Global.System.Data.DataColumn
        
        Private columnFecha_lectura As Global.System.Data.DataColumn
        
        Private columnMedida_maximo As Global.System.Data.DataColumn
        
        Private columnImporte_base As Global.System.Data.DataColumn
        
        Private columnrecargo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Facturacion_Encabezado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Periodo_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Factura_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Socio_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocio_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Direccion_fisicaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion_fisica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Medidor_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedidor_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Servicio_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServicio_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Servicio_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServicio_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lectura_anteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLectura_anterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lectura_actualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLectura_actual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Unidad_excesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad_exceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cobro_excesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCobro_exceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_emisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_emision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_venceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_vence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_lecturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_lectura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Medida_maximoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedida_maximo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Importe_baseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte_base
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recargoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Facturacion_EncabezadoRow
            Get
                Return CType(Me.Rows(index),Facturacion_EncabezadoRow)
            End Get
        End Property
        
        Public Event Facturacion_EncabezadoRowChanging As Facturacion_EncabezadoRowChangeEventHandler
        
        Public Event Facturacion_EncabezadoRowChanged As Facturacion_EncabezadoRowChangeEventHandler
        
        Public Event Facturacion_EncabezadoRowDeleting As Facturacion_EncabezadoRowChangeEventHandler
        
        Public Event Facturacion_EncabezadoRowDeleted As Facturacion_EncabezadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFacturacion_EncabezadoRow(ByVal row As Facturacion_EncabezadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFacturacion_EncabezadoRow( _
                    ByVal Periodo_ID As String,  _
                    ByVal Factura_num As Long,  _
                    ByVal Socio_ID As Long,  _
                    ByVal Propietario As String,  _
                    ByVal Direccion_fisica As String,  _
                    ByVal Medidor_num As String,  _
                    ByVal Servicio_ID As Long,  _
                    ByVal Servicio_desc As String,  _
                    ByVal Lectura_anterior As Long,  _
                    ByVal Lectura_actual As Long,  _
                    ByVal Consumo As Long,  _
                    ByVal Unidad_exceso As Long,  _
                    ByVal Cobro_exceso As Double,  _
                    ByVal Facturado As Double,  _
                    ByVal Saldos As Double,  _
                    ByVal Fecha_emision As Date,  _
                    ByVal Fecha_vence As Date,  _
                    ByVal Fecha_lectura As Date,  _
                    ByVal Medida_maximo As String,  _
                    ByVal Importe_base As Double,  _
                    ByVal recargo As Double) As Facturacion_EncabezadoRow
            Dim rowFacturacion_EncabezadoRow As Facturacion_EncabezadoRow = CType(Me.NewRow,Facturacion_EncabezadoRow)
            Dim columnValuesArray() As Object = New Object() {Periodo_ID, Factura_num, Socio_ID, Propietario, Direccion_fisica, Medidor_num, Servicio_ID, Servicio_desc, Lectura_anterior, Lectura_actual, Consumo, Unidad_exceso, Cobro_exceso, Facturado, Saldos, Fecha_emision, Fecha_vence, Fecha_lectura, Medida_maximo, Importe_base, recargo}
            rowFacturacion_EncabezadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFacturacion_EncabezadoRow)
            Return rowFacturacion_EncabezadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Facturacion_EncabezadoDataTable = CType(MyBase.Clone,Facturacion_EncabezadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Facturacion_EncabezadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPeriodo_ID = MyBase.Columns("Periodo_ID")
            Me.columnFactura_num = MyBase.Columns("Factura_num")
            Me.columnSocio_ID = MyBase.Columns("Socio_ID")
            Me.columnPropietario = MyBase.Columns("Propietario")
            Me.columnDireccion_fisica = MyBase.Columns("Direccion_fisica")
            Me.columnMedidor_num = MyBase.Columns("Medidor_num")
            Me.columnServicio_ID = MyBase.Columns("Servicio_ID")
            Me.columnServicio_desc = MyBase.Columns("Servicio_desc")
            Me.columnLectura_anterior = MyBase.Columns("Lectura_anterior")
            Me.columnLectura_actual = MyBase.Columns("Lectura_actual")
            Me.columnConsumo = MyBase.Columns("Consumo")
            Me.columnUnidad_exceso = MyBase.Columns("Unidad_exceso")
            Me.columnCobro_exceso = MyBase.Columns("Cobro_exceso")
            Me.columnFacturado = MyBase.Columns("Facturado")
            Me.columnSaldos = MyBase.Columns("Saldos")
            Me.columnFecha_emision = MyBase.Columns("Fecha_emision")
            Me.columnFecha_vence = MyBase.Columns("Fecha_vence")
            Me.columnFecha_lectura = MyBase.Columns("Fecha_lectura")
            Me.columnMedida_maximo = MyBase.Columns("Medida_maximo")
            Me.columnImporte_base = MyBase.Columns("Importe_base")
            Me.columnrecargo = MyBase.Columns("recargo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPeriodo_ID = New Global.System.Data.DataColumn("Periodo_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo_ID)
            Me.columnFactura_num = New Global.System.Data.DataColumn("Factura_num", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura_num)
            Me.columnSocio_ID = New Global.System.Data.DataColumn("Socio_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocio_ID)
            Me.columnPropietario = New Global.System.Data.DataColumn("Propietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropietario)
            Me.columnDireccion_fisica = New Global.System.Data.DataColumn("Direccion_fisica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion_fisica)
            Me.columnMedidor_num = New Global.System.Data.DataColumn("Medidor_num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedidor_num)
            Me.columnServicio_ID = New Global.System.Data.DataColumn("Servicio_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServicio_ID)
            Me.columnServicio_desc = New Global.System.Data.DataColumn("Servicio_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServicio_desc)
            Me.columnLectura_anterior = New Global.System.Data.DataColumn("Lectura_anterior", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLectura_anterior)
            Me.columnLectura_actual = New Global.System.Data.DataColumn("Lectura_actual", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLectura_actual)
            Me.columnConsumo = New Global.System.Data.DataColumn("Consumo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsumo)
            Me.columnUnidad_exceso = New Global.System.Data.DataColumn("Unidad_exceso", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad_exceso)
            Me.columnCobro_exceso = New Global.System.Data.DataColumn("Cobro_exceso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCobro_exceso)
            Me.columnFacturado = New Global.System.Data.DataColumn("Facturado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturado)
            Me.columnSaldos = New Global.System.Data.DataColumn("Saldos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldos)
            Me.columnFecha_emision = New Global.System.Data.DataColumn("Fecha_emision", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_emision)
            Me.columnFecha_vence = New Global.System.Data.DataColumn("Fecha_vence", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_vence)
            Me.columnFecha_lectura = New Global.System.Data.DataColumn("Fecha_lectura", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_lectura)
            Me.columnMedida_maximo = New Global.System.Data.DataColumn("Medida_maximo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedida_maximo)
            Me.columnImporte_base = New Global.System.Data.DataColumn("Importe_base", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte_base)
            Me.columnrecargo = New Global.System.Data.DataColumn("recargo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecargo)
            Me.columnFactura_num.Caption = "Socio_ID"
            Me.columnServicio_desc.Caption = "Servicio"
            Me.columnConsumo.Caption = "Consumo_total"
            Me.columnUnidad_exceso.Caption = "Consumo_exceso"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFacturacion_EncabezadoRow() As Facturacion_EncabezadoRow
            Return CType(Me.NewRow,Facturacion_EncabezadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Facturacion_EncabezadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Facturacion_EncabezadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Facturacion_EncabezadoRowChangedEvent) Is Nothing) Then
                RaiseEvent Facturacion_EncabezadoRowChanged(Me, New Facturacion_EncabezadoRowChangeEvent(CType(e.Row,Facturacion_EncabezadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Facturacion_EncabezadoRowChangingEvent) Is Nothing) Then
                RaiseEvent Facturacion_EncabezadoRowChanging(Me, New Facturacion_EncabezadoRowChangeEvent(CType(e.Row,Facturacion_EncabezadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Facturacion_EncabezadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Facturacion_EncabezadoRowDeleted(Me, New Facturacion_EncabezadoRowChangeEvent(CType(e.Row,Facturacion_EncabezadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Facturacion_EncabezadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Facturacion_EncabezadoRowDeleting(Me, New Facturacion_EncabezadoRowChangeEvent(CType(e.Row,Facturacion_EncabezadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFacturacion_EncabezadoRow(ByVal row As Facturacion_EncabezadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFacturas = New dsFacturas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Facturacion_EncabezadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Facturacion_EncabezadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableFacturacion_Encabezado As Facturacion_EncabezadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFacturacion_Encabezado = CType(Me.Table,Facturacion_EncabezadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Periodo_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo_ID' de la tabla 'Facturacion_Encabezado' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Periodo_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura_num() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Factura_numColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Factura_num' de la tabla 'Facturacion_Encabezado' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Factura_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Socio_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Socio_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Socio_ID' de la tabla 'Facturacion_Encabezado' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Socio_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propietario() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.PropietarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Propietario' de la tabla 'Facturacion_Encabezado' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.PropietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion_fisica() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Direccion_fisicaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Direccion_fisica' de la tabla 'Facturacion_Encabezado' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Direccion_fisicaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Medidor_num() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Medidor_numColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Medidor_num' de la tabla 'Facturacion_Encabezado' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Medidor_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Servicio_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Servicio_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Servicio_ID' de la tabla 'Facturacion_Encabezado' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Servicio_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Servicio_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Servicio_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Servicio_desc' de la tabla 'Facturacion_Encabezado' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Servicio_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lectura_anterior() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Lectura_anteriorColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Lectura_anterior' de la tabla 'Facturacion_Encabezado' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Lectura_anteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lectura_actual() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Lectura_actualColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Lectura_actual' de la tabla 'Facturacion_Encabezado' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Lectura_actualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Consumo() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.ConsumoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Consumo' de la tabla 'Facturacion_Encabezado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.ConsumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad_exceso() As Long
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Unidad_excesoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad_exceso' de la tabla 'Facturacion_Encabezado' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Unidad_excesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cobro_exceso() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Cobro_excesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cobro_exceso' de la tabla 'Facturacion_Encabezado' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Cobro_excesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.FacturadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Facturado' de la tabla 'Facturacion_Encabezado' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.FacturadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.SaldosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldos' de la tabla 'Facturacion_Encabezado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.SaldosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_emision() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Fecha_emisionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_emision' de la tabla 'Facturacion_Encabezado' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Fecha_emisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_vence() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Fecha_venceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_vence' de la tabla 'Facturacion_Encabezado' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Fecha_venceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_lectura() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Fecha_lecturaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_lectura' de la tabla 'Facturacion_Encabezado' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Fecha_lecturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Medida_maximo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Medida_maximoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Medida_maximo' de la tabla 'Facturacion_Encabezado' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Medida_maximoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe_base() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.Importe_baseColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe_base' de la tabla 'Facturacion_Encabezado' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.Importe_baseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recargo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturacion_Encabezado.recargoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'recargo' de la tabla 'Facturacion_Encabezado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturacion_Encabezado.recargoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodo_IDNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Periodo_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodo_IDNull()
            Me(Me.tableFacturacion_Encabezado.Periodo_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFactura_numNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Factura_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFactura_numNull()
            Me(Me.tableFacturacion_Encabezado.Factura_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocio_IDNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Socio_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocio_IDNull()
            Me(Me.tableFacturacion_Encabezado.Socio_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropietarioNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.PropietarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropietarioNull()
            Me(Me.tableFacturacion_Encabezado.PropietarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccion_fisicaNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Direccion_fisicaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccion_fisicaNull()
            Me(Me.tableFacturacion_Encabezado.Direccion_fisicaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedidor_numNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Medidor_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedidor_numNull()
            Me(Me.tableFacturacion_Encabezado.Medidor_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsServicio_IDNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Servicio_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetServicio_IDNull()
            Me(Me.tableFacturacion_Encabezado.Servicio_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsServicio_descNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Servicio_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetServicio_descNull()
            Me(Me.tableFacturacion_Encabezado.Servicio_descColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLectura_anteriorNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Lectura_anteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLectura_anteriorNull()
            Me(Me.tableFacturacion_Encabezado.Lectura_anteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLectura_actualNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Lectura_actualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLectura_actualNull()
            Me(Me.tableFacturacion_Encabezado.Lectura_actualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsumoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.ConsumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsumoNull()
            Me(Me.tableFacturacion_Encabezado.ConsumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidad_excesoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Unidad_excesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidad_excesoNull()
            Me(Me.tableFacturacion_Encabezado.Unidad_excesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCobro_excesoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Cobro_excesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCobro_excesoNull()
            Me(Me.tableFacturacion_Encabezado.Cobro_excesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturadoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.FacturadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturadoNull()
            Me(Me.tableFacturacion_Encabezado.FacturadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldosNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.SaldosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldosNull()
            Me(Me.tableFacturacion_Encabezado.SaldosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_emisionNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Fecha_emisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_emisionNull()
            Me(Me.tableFacturacion_Encabezado.Fecha_emisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_venceNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Fecha_venceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_venceNull()
            Me(Me.tableFacturacion_Encabezado.Fecha_venceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_lecturaNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Fecha_lecturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_lecturaNull()
            Me(Me.tableFacturacion_Encabezado.Fecha_lecturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedida_maximoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Medida_maximoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedida_maximoNull()
            Me(Me.tableFacturacion_Encabezado.Medida_maximoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporte_baseNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.Importe_baseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporte_baseNull()
            Me(Me.tableFacturacion_Encabezado.Importe_baseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrecargoNull() As Boolean
            Return Me.IsNull(Me.tableFacturacion_Encabezado.recargoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrecargoNull()
            Me(Me.tableFacturacion_Encabezado.recargoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Facturacion_EncabezadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Facturacion_EncabezadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Facturacion_EncabezadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Facturacion_EncabezadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
